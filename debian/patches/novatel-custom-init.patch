commit 7c929b5cf19ca6fd3ed8c5667efc026df13046a1
Author: Aleksander Morgado <aleksander@aleksander.es>
Date:   Fri Feb 6 15:30:50 2015 +0100

    novatel: move custom init method to separate source files

---
 plugins/Makefile.am                 |    2 
 plugins/novatel/mm-common-novatel.c |  158 ++++++++++++++++++++++++++++++++++++
 plugins/novatel/mm-common-novatel.h |   31 +++++++
 plugins/novatel/mm-plugin-novatel.c |  146 ---------------------------------
 4 files changed, 194 insertions(+), 143 deletions(-)

Index: b/plugins/Makefile.am
===================================================================
--- a/plugins/Makefile.am
+++ b/plugins/Makefile.am
@@ -459,6 +459,8 @@ libmm_plugin_novatel_lte_la_LDFLAGS = $(
 libmm_plugin_novatel_la_SOURCES = \
 	novatel/mm-plugin-novatel.c \
 	novatel/mm-plugin-novatel.h \
+	novatel/mm-common-novatel.c \
+	novatel/mm-common-novatel.h \
 	novatel/mm-broadband-modem-novatel.c \
 	novatel/mm-broadband-modem-novatel.h
 libmm_plugin_novatel_la_CPPFLAGS = $(PLUGIN_COMMON_COMPILER_FLAGS)
Index: b/plugins/novatel/mm-common-novatel.c
===================================================================
--- /dev/null
+++ b/plugins/novatel/mm-common-novatel.c
@@ -0,0 +1,158 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details:
+ *
+ * Copyright (C) 2015 Aleksander Morgado <aleksander@aleksander.es>
+ */
+
+#include "mm-common-novatel.h"
+#include "mm-log.h"
+
+/*****************************************************************************/
+/* Custom init */
+
+typedef struct {
+    MMPortProbe *probe;
+    MMPortSerialAt *port;
+    GCancellable *cancellable;
+    GSimpleAsyncResult *result;
+    guint nwdmat_retries;
+    guint wait_time;
+} CustomInitContext;
+
+static void
+custom_init_context_complete_and_free (CustomInitContext *ctx)
+{
+    g_simple_async_result_complete_in_idle (ctx->result);
+
+    if (ctx->cancellable)
+        g_object_unref (ctx->cancellable);
+    g_object_unref (ctx->port);
+    g_object_unref (ctx->probe);
+    g_object_unref (ctx->result);
+    g_slice_free (CustomInitContext, ctx);
+}
+
+gboolean
+mm_common_novatel_custom_init_finish (MMPortProbe *probe,
+                                      GAsyncResult *result,
+                                      GError **error)
+{
+    return !g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (result), error);
+}
+
+static void custom_init_step (CustomInitContext *ctx);
+
+static void
+nwdmat_ready (MMPortSerialAt *port,
+              GAsyncResult *res,
+              CustomInitContext *ctx)
+{
+    const gchar *response;
+    GError *error = NULL;
+
+    response = mm_port_serial_at_command_finish (port, res, &error);
+    if (error) {
+        if (g_error_matches (error,
+                             MM_SERIAL_ERROR,
+                             MM_SERIAL_ERROR_RESPONSE_TIMEOUT)) {
+            custom_init_step (ctx);
+            goto out;
+        }
+
+        mm_dbg ("(Novatel) Error flipping secondary ports to AT mode: %s", error->message);
+    }
+
+    /* Finish custom_init */
+    g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
+    custom_init_context_complete_and_free (ctx);
+
+out:
+    if (error)
+        g_error_free (error);
+}
+
+static gboolean
+custom_init_wait_cb (CustomInitContext *ctx)
+{
+    custom_init_step (ctx);
+    return FALSE;
+}
+
+static void
+custom_init_step (CustomInitContext *ctx)
+{
+    /* If cancelled, end */
+    if (g_cancellable_is_cancelled (ctx->cancellable)) {
+        mm_dbg ("(Novatel) no need to keep on running custom init in (%s)",
+                mm_port_get_device (MM_PORT (ctx->port)));
+        g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
+        custom_init_context_complete_and_free (ctx);
+        return;
+    }
+
+    /* If device has a QMI port, don't run $NWDMAT */
+    if (mm_port_probe_list_has_qmi_port (mm_device_peek_port_probe_list (mm_port_probe_peek_device (ctx->probe)))) {
+        mm_dbg ("(Novatel) no need to run custom init in (%s): device has QMI port",
+                mm_port_get_device (MM_PORT (ctx->port)));
+        g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
+        custom_init_context_complete_and_free (ctx);
+        return;
+    }
+
+    if (ctx->wait_time > 0) {
+        ctx->wait_time--;
+        g_timeout_add_seconds (1, (GSourceFunc)custom_init_wait_cb, ctx);
+        return;
+    }
+
+    if (ctx->nwdmat_retries > 0) {
+        ctx->nwdmat_retries--;
+        mm_port_serial_at_command (ctx->port,
+                                   "$NWDMAT=1",
+                                   3,
+                                   FALSE, /* raw */
+                                   FALSE, /* allow_cached */
+                                   ctx->cancellable,
+                                   (GAsyncReadyCallback)nwdmat_ready,
+                                   ctx);
+        return;
+    }
+
+    /* Finish custom_init */
+    mm_dbg ("(Novatel) couldn't flip secondary port to AT in (%s): all retries consumed",
+            mm_port_get_device (MM_PORT (ctx->port)));
+    g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
+    custom_init_context_complete_and_free (ctx);
+}
+
+void
+mm_common_novatel_custom_init (MMPortProbe *probe,
+                               MMPortSerialAt *port,
+                               GCancellable *cancellable,
+                               GAsyncReadyCallback callback,
+                               gpointer user_data)
+{
+    CustomInitContext *ctx;
+
+    ctx = g_slice_new (CustomInitContext);
+    ctx->result = g_simple_async_result_new (G_OBJECT (probe),
+                                             callback,
+                                             user_data,
+                                             mm_common_novatel_custom_init);
+    ctx->probe = g_object_ref (probe);
+    ctx->port = g_object_ref (port);
+    ctx->cancellable = cancellable ? g_object_ref (cancellable) : NULL;
+    ctx->nwdmat_retries = 3;
+    ctx->wait_time = 2;
+
+    custom_init_step (ctx);
+}
Index: b/plugins/novatel/mm-common-novatel.h
===================================================================
--- /dev/null
+++ b/plugins/novatel/mm-common-novatel.h
@@ -0,0 +1,31 @@
+/* -*- Mode: C; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details:
+ *
+ * Copyright (C) 2015 Aleksander Morgado <aleksander@aleksander.es>
+ */
+
+#ifndef MM_COMMON_NOVATEL_H
+#define MM_COMMON_NOVATEL_H
+
+#include "glib.h"
+#include "mm-plugin.h"
+
+void     mm_common_novatel_custom_init        (MMPortProbe *probe,
+                                               MMPortSerialAt *port,
+                                               GCancellable *cancellable,
+                                               GAsyncReadyCallback callback,
+                                               gpointer user_data);
+gboolean mm_common_novatel_custom_init_finish (MMPortProbe *probe,
+                                               GAsyncResult *result,
+                                               GError **error);
+
+#endif  /* MM_COMMON_NOVATEL_H */
Index: b/plugins/novatel/mm-plugin-novatel.c
===================================================================
--- a/plugins/novatel/mm-plugin-novatel.c
+++ b/plugins/novatel/mm-plugin-novatel.c
@@ -28,6 +28,7 @@
 #include <libmm-glib.h>
 
 #include "mm-plugin-novatel.h"
+#include "mm-common-novatel.h"
 #include "mm-private-boxed-types.h"
 #include "mm-broadband-modem-novatel.h"
 #include "mm-log.h"
@@ -55,147 +56,6 @@ static const MMPortProbeAtCommand custom
 };
 
 /*****************************************************************************/
-/* Custom init */
-
-typedef struct {
-    MMPortProbe *probe;
-    MMPortSerialAt *port;
-    GCancellable *cancellable;
-    GSimpleAsyncResult *result;
-    guint nwdmat_retries;
-    guint wait_time;
-} CustomInitContext;
-
-static void
-custom_init_context_complete_and_free (CustomInitContext *ctx)
-{
-    g_simple_async_result_complete_in_idle (ctx->result);
-
-    if (ctx->cancellable)
-        g_object_unref (ctx->cancellable);
-    g_object_unref (ctx->port);
-    g_object_unref (ctx->probe);
-    g_object_unref (ctx->result);
-    g_slice_free (CustomInitContext, ctx);
-}
-
-static gboolean
-novatel_custom_init_finish (MMPortProbe *probe,
-                            GAsyncResult *result,
-                            GError **error)
-{
-    return !g_simple_async_result_propagate_error (G_SIMPLE_ASYNC_RESULT (result), error);
-}
-
-static void custom_init_step (CustomInitContext *ctx);
-
-static void
-nwdmat_ready (MMPortSerialAt *port,
-              GAsyncResult *res,
-              CustomInitContext *ctx)
-{
-    const gchar *response;
-    GError *error = NULL;
-
-    response = mm_port_serial_at_command_finish (port, res, &error);
-    if (error) {
-        if (g_error_matches (error,
-                             MM_SERIAL_ERROR,
-                             MM_SERIAL_ERROR_RESPONSE_TIMEOUT)) {
-            custom_init_step (ctx);
-            goto out;
-        }
-
-        mm_dbg ("(Novatel) Error flipping secondary ports to AT mode: %s", error->message);
-    }
-
-    /* Finish custom_init */
-    g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
-    custom_init_context_complete_and_free (ctx);
-
-out:
-    if (error)
-        g_error_free (error);
-}
-
-static gboolean
-custom_init_wait_cb (CustomInitContext *ctx)
-{
-    custom_init_step (ctx);
-    return FALSE;
-}
-
-static void
-custom_init_step (CustomInitContext *ctx)
-{
-    /* If cancelled, end */
-    if (g_cancellable_is_cancelled (ctx->cancellable)) {
-        mm_dbg ("(Novatel) no need to keep on running custom init in (%s)",
-                mm_port_get_device (MM_PORT (ctx->port)));
-        g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
-        custom_init_context_complete_and_free (ctx);
-        return;
-    }
-
-    /* If device has a QMI port, don't run $NWDMAT */
-    if (mm_port_probe_list_has_qmi_port (mm_device_peek_port_probe_list (mm_port_probe_peek_device (ctx->probe)))) {
-        mm_dbg ("(Novatel) no need to run custom init in (%s): device has QMI port",
-                mm_port_get_device (MM_PORT (ctx->port)));
-        g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
-        custom_init_context_complete_and_free (ctx);
-        return;
-    }
-
-    if (ctx->wait_time > 0) {
-        ctx->wait_time--;
-        g_timeout_add_seconds (1, (GSourceFunc)custom_init_wait_cb, ctx);
-        return;
-    }
-
-    if (ctx->nwdmat_retries > 0) {
-        ctx->nwdmat_retries--;
-        mm_port_serial_at_command (ctx->port,
-                                   "$NWDMAT=1",
-                                   3,
-                                   FALSE, /* raw */
-                                   FALSE, /* allow_cached */
-                                   ctx->cancellable,
-                                   (GAsyncReadyCallback)nwdmat_ready,
-                                   ctx);
-        return;
-    }
-
-    /* Finish custom_init */
-    mm_dbg ("(Novatel) couldn't flip secondary port to AT in (%s): all retries consumed",
-            mm_port_get_device (MM_PORT (ctx->port)));
-    g_simple_async_result_set_op_res_gboolean (ctx->result, TRUE);
-    custom_init_context_complete_and_free (ctx);
-}
-
-static void
-novatel_custom_init (MMPortProbe *probe,
-                     MMPortSerialAt *port,
-                     GCancellable *cancellable,
-                     GAsyncReadyCallback callback,
-                     gpointer user_data)
-{
-    CustomInitContext *ctx;
-
-    ctx = g_slice_new (CustomInitContext);
-    ctx->result = g_simple_async_result_new (G_OBJECT (probe),
-                                             callback,
-                                             user_data,
-                                             novatel_custom_init);
-    ctx->probe = g_object_ref (probe);
-    ctx->port = g_object_ref (port);
-    ctx->cancellable = cancellable ? g_object_ref (cancellable) : NULL;
-    ctx->nwdmat_retries = 3;
-    ctx->wait_time = 2;
-
-    custom_init_step (ctx);
-}
-
-/*****************************************************************************/
 
 static MMBaseModem *
 create_modem (MMPlugin *self,
@@ -236,8 +96,8 @@ mm_plugin_create (void)
     static const mm_uint16_pair forbidden_products[] = { { 0x1410, 0x9010 }, /* Novatel E362 */
                                                          { 0, 0 } };
     static const MMAsyncMethod custom_init = {
-        .async  = G_CALLBACK (novatel_custom_init),
-        .finish = G_CALLBACK (novatel_custom_init_finish),
+        .async  = G_CALLBACK (mm_common_novatel_custom_init),
+        .finish = G_CALLBACK (mm_common_novatel_custom_init_finish),
     };
 
     return MM_PLUGIN (
